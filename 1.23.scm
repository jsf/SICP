(define (next n)
  (if (= n 2)
      3
      (+ n 2)))

(define (runtime) (current-milliseconds))

(define (smallest-divisor n)
  (find-divisor n 2))
(define (find-divisor n test-divisor)
  (cond ((> (square test-divisor) n) n)
        ((divides? test-divisor n) test-divisor)
        (else (find-divisor n (next test-divisor)))))
(define (divides? a b)
  (= (remainder b a) 0))

(define (square n)
  (* n n))

(define (prime? n)
  (= n (smallest-divisor n)))

(define (timed-prime-test n)
  (newline)
  (display n)
  (start-prime-test n (runtime)))
(define (start-prime-test n start-time)
  (cond ((prime? n)
         (report-prime (- (runtime) start-time)))))
(define (report-prime elapsed-time)
  (display " *** ")
  (display elapsed-time))

(define (primes-in-range l h)
  (cond ((even? l) (primes-in-range (+ l 1) h))
        ((< l h)
         (timed-prime-test l)
         (primes-in-range (+ l 2) h))))

(define (n-primes-larger-than x n)
  (cond ((= n 0) 0)
        ((even? x) (n-primes-larger-than (+ x 1) n))
        ((prime? x)
         (timed-prime-test x)
         (n-primes-larger-than (+ x 2) (- n 1)))
        (else (n-primes-larger-than (+ x 2) n))))

(n-primes-larger-than 100000000 3)
(sqrt 100000000)
(n-primes-larger-than 1000000000 3)
(sqrt 1000000000)
(n-primes-larger-than 10000000000 3)
(sqrt 10000000000)
(n-primes-larger-than 100000000000 3)
(sqrt 100000000000)
